#pragma once
// If we are not building for AVR architectures ignore PROGMEM
#if defined(__AVR__)
#include <avr/pgmspace.h>
#else
#define PROGMEM
#endif
#include <LCD_Fonts.h>

/**
 * This example uses a font originally created by the author here: 
 * https://github.com/gavinlyonsrepo/NOKIA5110_TEXT
 **/

namespace Small_LCD_Fonts {
    const uint8_t kColumns_per_character = 3;
    const unsigned char hSpace[] = {0x00};
    const unsigned char hSpaceSize = 1;

    /* Font table:
    This table contains the hex values that represent pixels for a
    font that is 5 pixels wide and 8 pixels high. Each byte in a row
    represents one, 8-pixel, vertical column of a character. 3 bytes
    per character. */
    const unsigned char kFont_Table[][kColumns_per_character] PROGMEM = {
        // First 32 characters (0x00-0x19) are ignored. These are
        // non-displayable, control characters.
        {0x00,0x00,0x00}, //  
        {0x00,0x2e,0x00}, // !
        {0x06,0x00,0x06}, // "
        {0x3e,0x14,0x3e}, // #
        {0x0c,0x36,0x18}, // $
        {0x32,0x08,0x26}, // %
        {0x14,0x2a,0x34}, // &
        {0x00,0x06,0x00}, // '
        {0x00,0x1c,0x22}, // (
        {0x22,0x1c,0x00}, // )
        {0x14,0x08,0x14}, // *
        {0x08,0x1c,0x08}, // +
        {0x40,0x60,0x00}, // ,
        {0x08,0x08,0x08}, // -
        {0x00,0x20,0x00}, // .
        {0x60,0x1c,0x02}, // /
        {0x3e,0x22,0x3e}, // 0
        {0x24,0x3e,0x20}, // 1
        {0x32,0x2a,0x26}, // 2
        {0x22,0x2a,0x3e}, // 3
        {0x0e,0x08,0x3e}, // 4
        {0x2e,0x2a,0x3a}, // 5
        {0x3e,0x2a,0x3a}, // 6
        {0x02,0x3a,0x06}, // 7
        {0x3e,0x2a,0x3e}, // 8
        {0x2e,0x2a,0x3e}, // 9
        {0x00,0x14,0x00}, // :
        {0x40,0x64,0x00}, // ;
        {0x08,0x14,0x22}, // <
        {0x14,0x14,0x14}, // =
        {0x22,0x14,0x08}, // >
        {0x02,0x2a,0x06}, // ?
        {0x3e,0x22,0x2e}, // @
        {0x3e,0x0a,0x3e}, // A
        {0x3e,0x2a,0x36}, // B
        {0x3e,0x22,0x22}, // C
        {0x3e,0x22,0x1c}, // D
        {0x3e,0x2a,0x22}, // E
        {0x3e,0x0a,0x02}, // F
        {0x3e,0x22,0x3a}, // G
        {0x3e,0x08,0x3e}, // H
        {0x22,0x3e,0x22}, // I
        {0x30,0x20,0x3e}, // J
        {0x3e,0x08,0x36}, // K
        {0x3e,0x20,0x20}, // L
        {0x3e,0x04,0x3e}, // M
        {0x3c,0x08,0x1e}, // N
        {0x3e,0x22,0x3e}, // O
        {0x3e,0x0a,0x0e}, // P
        {0x3e,0x22,0x7e}, // Q
        {0x3e,0x0a,0x34}, // R
        {0x2e,0x2a,0x3a}, // S
        {0x02,0x3e,0x02}, // T
        {0x3e,0x20,0x3e}, // U
        {0x1e,0x20,0x1e}, // V
        {0x3e,0x10,0x3e}, // W
        {0x36,0x08,0x36}, // X
        {0x06,0x38,0x06}, // Y
        {0x32,0x2a,0x26}, // Z
        {0x00,0x3e,0x22}, // [
        {0x02,0x1c,0x60}, // "\"
        {0x22,0x3e,0x00}, // ]
        {0x04,0x02,0x04}, // ^
        {0x40,0x40,0x40}, // _
        {0x00,0x02,0x00}, // `
        {0x3e,0x0a,0x3e}, // a
        {0x3e,0x2a,0x36}, // b
        {0x3e,0x22,0x22}, // c
        {0x3e,0x22,0x1c}, // d
        {0x3e,0x2a,0x22}, // e
        {0x3e,0x0a,0x02}, // f
        {0x3e,0x22,0x3a}, // g
        {0x3e,0x08,0x3e}, // h
        {0x22,0x3e,0x22}, // i
        {0x30,0x20,0x3e}, // j
        {0x3e,0x08,0x36}, // k
        {0x3e,0x20,0x20}, // l
        {0x3e,0x04,0x3e}, // m
        {0x3c,0x08,0x1e}, // n
        {0x3e,0x22,0x3e}, // o
        {0x3e,0x0a,0x0e}, // p
        {0x3e,0x22,0x7e}, // q
        {0x3e,0x0a,0x34}, // r
        {0x2e,0x2a,0x3a}, // s
        {0x02,0x3e,0x02}, // t
        {0x3e,0x20,0x3e}, // u
        {0x1e,0x20,0x1e}, // v
        {0x3e,0x10,0x3e}, // w
        {0x36,0x08,0x36}, // x
        {0x06,0x38,0x06}, // y
        {0x32,0x2a,0x26}, // z
        {0x08,0x3e,0x22}, // {
        {0x00,0x7e,0x00}, // |
        {0x22,0x3e,0x08}, // }
        {0x02,0x06,0x04}, // ~
        {0x00,0x00,0x00}
    };

    // Alternatively, it's possible to create a method for getFont instead of lambda
    //
    // const unsigned char* getFont(char character)
    // {
    //     return kFont_Table[character - 0x20];
    // }

    const LcdFont SmallFont { 
        [](char c) { return kFont_Table[c - 0x20]; }, 
        kColumns_per_character,
        hSpace, 
        hSpaceSize 
    };

}  // namespace Small_LCD_Fonts
